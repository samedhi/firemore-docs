<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://samedhi.github.io/" rel="self" type="application/rss+xml"/><title>Firemore Docs</title><link>https://samedhi.github.io/</link><description>Documentation for firemore</description><lastBuildDate>Sun, 30 Jun 2019 08:06:51 -0700</lastBuildDate><generator>clj-rss</generator><item><guid>https://samedhi.github.io/firemore-docs/posts-output/2019-06-26-README/</guid><link>https://samedhi.github.io/firemore-docs/posts-output/2019-06-26-README/</link><title>README</title><description>&lt;h1 id="wip_wip_wip_wip_wip_wip"&gt;WIP WIP WIP WIP WIP WIP&lt;/h1&gt;&lt;h1 id="this_is_not_implemented_yet!_i_thought_it_would_be_interesting_to_write_the_documentation_first_and_the_actual_test_and_code_second._i_am_currently_still_working_on_the_documentation_for_this"&gt;THIS IS NOT IMPLEMENTED YET! I THOUGHT IT WOULD BE INTERESTING TO WRITE THE DOCUMENTATION FIRST AND THE ACTUAL TEST AND CODE SECOND. I AM CURRENTLY STILL WORKING ON THE DOCUMENTATION FOR THIS&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;[x] Documentation&lt;/li&gt;&lt;li&gt;[x] Klipse Integration&lt;/li&gt;&lt;li&gt;[ ] Unit Test&lt;/li&gt;&lt;li&gt;[ ] Code&lt;/li&gt;&lt;li&gt;[ ] Example Project&lt;/li&gt;&lt;/ul&gt;&lt;h1 id="firemore"&gt;firemore&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Firemore&lt;/strong&gt; is a library for writing &lt;a href="https://clojure.org/"&gt;clojure&lt;/a&gt;(&lt;a href="https://clojurescript.org/"&gt;script&lt;/a&gt;) applications using &lt;a href="https://cloud.google.com/firestore"&gt;Google Firestore&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Main features include:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;A direct API to the &lt;a href="https://firebase.google.com/docs/firestore"&gt;Firestore Database&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Automatic (and customizable) conversions between clojure maps and Firestore "json" documents.&lt;/li&gt;&lt;li&gt;A channels based API for getting and observing Firestore documents.&lt;/li&gt;&lt;li&gt;A binding between the Firestore Cloud database and a local clojure atom (great for om/re-frame/reagent).&lt;/li&gt;&lt;/ol&gt;&lt;h1 id="table_of_contents"&gt;Table of Contents&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="#getting_started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#api"&gt;API&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 id="getting_started"&gt;Getting Started&lt;/h1&gt;&lt;p&gt;To use firemore in an existing project, simply add this to your dependencies in project.clj (&lt;a href="https://github.com/technomancy/leiningen"&gt;lein&lt;/a&gt;) or build.boot (&lt;a href="https://github.com/boot-clj/boot"&gt;boot&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;!!!!! [firemore "x.y.z"] @clojars !!!!!!&lt;/p&gt;&lt;h1 id="usage"&gt;Usage&lt;/h1&gt;&lt;p&gt;;; TODO: Transparently convert arrays to Sets and back. Auto index for containment?&lt;/p&gt;&lt;p&gt;;; TODO: Transparently convert keywords to strings and back? Maybe write some checksum at front of keyword?&lt;/p&gt;&lt;p&gt;;; TODO: Add in metadata whether value you see if realized or not.&lt;/p&gt;&lt;p&gt;The following is a walkthrough of the main features of firemore.&lt;/p&gt;&lt;h2 id="references"&gt;References&lt;/h2&gt;&lt;p&gt;Read the documentation on &lt;a href="https://firebase.google.com/docs/firestore/data-model"&gt;documents, collections, and references&lt;/a&gt; (just the linked page). Go ahead. I'll wait.&lt;/p&gt;&lt;p&gt;As you just read, a Firestore reference is a javascript object with a bunch of functions attached to it. In firemore a reference is a vector of keywords or strings with length at least 1.&lt;/p&gt;&lt;p&gt;So, the following document reference in firestore&lt;/p&gt;&lt;pre&gt;&lt;code class="javascript"&gt;db.collection('users').doc('alovelace');
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Becomes this in firemore:&lt;/p&gt;&lt;pre&gt;&lt;code class="klipse-cljs nohighlight"&gt;["users" "alovelace"] ;; OR
[:users  "alovelace"]  ;; OR
["users" :alovelace]  ;; OR
[:users  :alovelace]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that keywords and strings are interchangeable. I prefer to use keywords in collection (odd) positions and strings in id (even) positions, but it is up to you.&lt;/p&gt;&lt;p&gt;Note that a vector with an even number of keywords and strings must be a reference to a document, while a vector with a odd number of keywords and strings must be a reference to a collection. So &lt;code&gt;[:users]&lt;/code&gt; is a reference to the &lt;code&gt;users&lt;/code&gt; collection. While &lt;code&gt;[:users "alovelace"]&lt;/code&gt; is a reference to a document &lt;em&gt;within&lt;/em&gt; the &lt;code&gt;users&lt;/code&gt; collection.&lt;/p&gt;&lt;h2 id="read_from_firestore"&gt;Read from Firestore&lt;/h2&gt;&lt;p&gt;The map to your right shows the data currently in your section of the firestore database. I have taken the liberty of setting you up with some starting data so that we can practice reading it using firemore.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt; &lt;code class="klipse-cljs nohighlight" data-external-libs="http://localhost:8000/src"&gt; (require '[firemore.core :as firemore]) &lt;/code&gt; &lt;/pre&gt;&lt;pre&gt;&lt;code class="klipse-cljs nohighlight"&gt;(require '[clojure.core.async :as async :refer-macros [go go-loop]])
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="klipse-cljs nohighlight"&gt;(def user-chan (firemore/get-user))

(defn my-db-reference 
  "Creates a reference to a location in the database just for you."
  [&amp;amp; additional-keys]
  (async/go 
   (-&amp;gt; user-chan
       async/&amp;lt;!
       :uid
       (vector :users)
       (into additional-keys))))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that the reference begins with &lt;code&gt;[:users user-id]&lt;/code&gt;. This is because I have set up &lt;a href="https://firebase.google.com/docs/firestore/security/get-started"&gt;security rules&lt;/a&gt; so you and only you may read and write to a location under &lt;code&gt;users/&amp;lt;user-id&amp;gt;&lt;/code&gt; in the Firestore database. This is necessary because this database is being used by everyone currently looking at this documentation. The security rule allows me to carve out a little place in the database for you to play without conflicting with others.&lt;/p&gt;&lt;p&gt;Is Luke Skywalker a force user? I can never remember? Let's check!&lt;/p&gt;&lt;pre&gt;&lt;code class="klipse-cljs nohighlight"&gt;(go
  (let [user-chan (firemore/get-user)
        {:keys [uid]} (&amp;lt;! user-chan)
        luke-reference [:users user-id :characters "luke"])
        luke (&amp;lt;! (get luke-reference))]

    (println "luke -&amp;gt;" luke)

    (println "Is luke a force user? " (:force-user? luke))))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That's right, he does have force powers! Couldn't remember.&lt;/p&gt;&lt;p&gt;A firemore document is a regular &lt;a href="https://clojure.org/reference/data_structures#Maps"&gt;clojure map&lt;/a&gt;. There is a fair amount of code to allow for conversion between a Firestore document and a firemore document (see &lt;a href="#clojure_interop"&gt;Clojure Interop&lt;/a&gt; for details).&lt;/p&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;Usage:
(get reference)

Returns a channel. If a document exist at reference, it will be put! upon the
channel. If no document exist at reference, then :firemore/no-document will be
put! on the channel. The channel will then be closed.

Note:
put! -&amp;gt;  clojure.core.async/put!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But what if I want to watch Luke change over time? What if I want to be notified as Luke changes? Rather than getting Luke once, let's watch him from now on.&lt;/p&gt;&lt;pre&gt;&lt;code class="klipse-cljs nohighlight"&gt;(async/go
  (let [luke-chan (watch luke-reference)
        initial-luke (&amp;lt;! luke-chan)]
    (println "Initial Luke -&amp;gt;" initial-luke)

    (println "Merging in Luke's teenage occupation...")
    (merge! luke-reference {:occupation "farmboy"})
    (println "teenage Luke -&amp;gt;" (&amp;lt;! luke-chan))

    (println "Changing Luke's adult occupation...")
    (write! luke-reference (assoc initial-luke :occupation "jedi"))
    (println "adult Luke -&amp;gt;" (&amp;lt;! luke-chan))

    (println "Changing to Lukes final occupation after episode 7")
    (write! luke-reference (assoc initial-luke :occupation "One with the Force"}))
    (println "Episode 7 Luke -&amp;gt;" (&amp;lt;! luke-chan))

    (println "Remove luke from the Firestore database")
    (delete! luke-reference)
    (println "Removed Luke reference -&amp;gt;" (&amp;lt;! luke-chan))

    ;; Remember to close the channel when you are done with it!
    (close! luke-chan)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above example, the first value of Luke pulled from &lt;code&gt;luke-chan&lt;/code&gt; is placed within &lt;code&gt;initial-luke&lt;/code&gt;. This is the current value of Luke and is equivalent to what you would get with &lt;code&gt;get&lt;/code&gt;. Every time I &lt;code&gt;write!&lt;/code&gt;, &lt;code&gt;merge!&lt;/code&gt; or &lt;code&gt;delete!&lt;/code&gt; upon the &lt;code&gt;luke-reference&lt;/code&gt;, I get the updated version of Luke placed within the &lt;code&gt;luke-chan&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;Usage:
(watch reference)

Returns a channel. If a document exist at reference, it will be put! upon
the channel. If no document exist at reference, then :firemore/no-document will
be put! on the channel. As the document at reference is updated through
time, the channel will put! the newest value of the document (if it exist)
or :firemore/no-document (if it does not) upon the channel.

Important: close! the channel to clean up the state machine feeding this
channel. Failure to close the channel will result in a memory leak.

Note:
put! -&amp;gt;  clojure.core.async/put!
close! -&amp;gt;  clojure.core.async/close!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="write_to_firestore"&gt;Write to Firestore&lt;/h2&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;Usage:
(write! reference m)

Returns a channel. Overwrites the document at reference with m.  Iff an error
occurs when writing m to Firestore, then the error will be put! upon the
channel. The channel will then be closed.

Note:
put! -&amp;gt;  clojure.core.async/put!
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;Usage:
(merge! reference m)

Returns a channel. Updates (merges in novelty) the document at reference with m.
Iff an error occurs when writing m to Firestore, then the error will be put!
upon the channel. The channel will then be closed.

Note:
put! -&amp;gt;  clojure.core.async/put!
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;Usage:
(delete! reference)

Returns a channel. Iff an error occurs when deleting reference from Firestore,
then the error will be put! upon the channel. The channel will then be closed.

Note:
put! -&amp;gt; clojure.core.async/put!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="queries"&gt;Queries&lt;/h2&gt;&lt;p&gt;First &lt;a href="https://firebase.google.com/docs/firestore/query-data/queries"&gt;read the documentation on queries&lt;/a&gt;. As you just read, in Firestore queries are built from a collection reference. In firemore queries are built by adding a query map to the end of the reference vector.&lt;/p&gt;&lt;p&gt;So this in Firestore&lt;/p&gt;&lt;pre&gt;&lt;code class="javascript"&gt;db.collection("cities").where("state", "==", "CA").where("population", "&amp;lt;", 1000000);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;becomes this in firemore&lt;/p&gt;&lt;pre&gt;&lt;code class="klipse-cljs nohighlight"&gt;[:cities {:where [["state" "==" "CA"]
                  ["population" "&amp;lt;" 1000000]]}]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Queries also support the &lt;a href="https://firebase.google.com/docs/firestore/query-data/order-limit-data"&gt;orderBy and limit option&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;So this in Firestore&lt;/p&gt;&lt;pre&gt;&lt;code class="javascript"&gt;citiesRef.where("population", "&amp;gt;", 100000).orderBy("population").orderBy("state", "desc").limit(2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;becomes this in firemore&lt;/p&gt;&lt;pre&gt;&lt;code class="klipse-cljs nohighlight"&gt;[:cities {:where [["population" "&amp;lt;" 1000000]]
          :order [["population" "asc"] ["state" "desc"]]
          :limit 2}]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you have only one &lt;code&gt;:where&lt;/code&gt; clause predicate, it is fine to specify it as a single vector. So this is also equivalent to the above.&lt;/p&gt;&lt;pre&gt;&lt;code class="klipse-cljs nohighlight"&gt;[:cities {:where ["population" "&amp;lt;" 1000000]
          :order [["population" "asc"] ["state" "desc"]]
          :limit 2}]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In a similar fashion, the &lt;code&gt;:order&lt;/code&gt; values are expanded into 2 element vectors of &lt;code&gt;[&amp;lt;property&amp;gt; "asc"]&lt;/code&gt; if they are specified as strings. So the following is also equivalent to the above.&lt;/p&gt;&lt;pre&gt;&lt;code class="klipse-cljs nohighlight"&gt;[:cities {:where ["population" "&amp;lt;" 1000000]
          :order ["population" ["state" "desc"]]
          :limit 2}]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, the &lt;code&gt;:start-at&lt;/code&gt;, &lt;code&gt;:start-after&lt;/code&gt;, and &lt;code&gt;end-at&lt;/code&gt; options from &lt;a href="https://firebase.google.com/docs/firestore/query-data/query-cursors"&gt;paginate data with query-cursors&lt;/a&gt; are also supported as options.&lt;/p&gt;&lt;h2 id="build_local_state_atom"&gt;Build Local State Atom&lt;/h2&gt;&lt;p&gt;Let's say you needed to keep track of the best of the &lt;a href="https://en.wikipedia.org/wiki/The_Three_Stooges"&gt;Three Stooges&lt;/a&gt;? How might you go about doing this with our current knowledge?&lt;/p&gt;&lt;pre&gt;&lt;code class="html"&gt;The best stooge is &amp;lt;span id="best-stooge-value"&amp;gt;&amp;lt;/span&amp;gt;.

&amp;lt;button id="moe-button"&amp;gt;&amp;lt;/button&amp;gt;
&amp;lt;button id="larry-button"&amp;gt;&amp;lt;/button&amp;gt;
&amp;lt;button id="curly-button"&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="klipse-cljs nohighlight"&gt;(def best-stooge-reference [:users user-id :best "stooge"])

(def best-stooge-chan (watch best-stooge-reference))

(go-loop []
  (when-let [{:keys [value]} (&amp;lt;! best-stooge-chan)]
    (aset! (js/document.querySelector "#best-stooge-value") "value" value)
    (recur)))

(doseq [stooge ["moe" "larry" "curly"]]
  (aset! (js/document.querySelector (str "#" stooge "-button"))
         "onclick"
         (fn [event] (merge! counter-reference {:value stooge}))))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The previous code does works. However, it is an annoyance to have to create a channel from a reference, create a &lt;code&gt;go-loop&lt;/code&gt; that consumes from said channel, and close the channel in order to properly dispose of the &lt;code&gt;go-loop&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Firemore has a solution to that.&lt;/p&gt;&lt;pre&gt;&lt;code class="klipse-cljs nohighlight"&gt;(def atm (atom {:paths {[:friends] [:app user-id :friends]
                        [:enemies] [:app user-id :enemies]
                        [:favorite :dog] [:app user-id :favorite "dog"]
                        [:favorite :cat] [:app user-id :favorite "cat"]}}))

;; Allows us to see the changes to the atom over time
(add-watch atm :print-firestore-changes
  (fn [_ _ old new]
    (let [only-in-old only-in-new _] (clojure.data/diff old new)]
      (when-not (empty? only-in-old)
        (println "Removed:")
        (doseq [o only-in-old]
          (println "-" o)))
      (when-not (empty? only-in-new)
        (println "Added:")
        (doseq [n only-in-new]
          (println "-" n))))))

;; Updates figure-1 to the newest value
(add-watch atm :display-atom
  (fn [_ _ _ new] (display-atom "figure-1" new)))

(hydrate atm)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see in &lt;strong&gt;figure-1&lt;/strong&gt;, all of the path/reference (key/value) pairs within &lt;code&gt;:paths&lt;/code&gt; have become realized things within &lt;code&gt;:firestore&lt;/code&gt;. If you remove a key from &lt;code&gt;:paths&lt;/code&gt; it will remove the same path from within &lt;code&gt;:firestore&lt;/code&gt;. Similarly if you add a new path/reference to &lt;code&gt;:paths&lt;/code&gt; it will add a corresponding location in &lt;code&gt;:firestore&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;Usage:
(hydrate atom)

Returns nil. Noop if atom is already hydrated. Adds a watch that causes atom to
automatically sync its :paths and :references root keys. :paths should be a
key value pair where the key is a path and the value is a reference. :paths can
have keys added and removed. :references will throw a error if you attempt to
modify them.
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;Usage:
(unhydrate atom)

Returns nil. Noop if atom is already unhydrated.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="authentication"&gt;Authentication&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt; &lt;em&gt;Note: Why is the following section not interactive?&lt;/em&gt; &lt;/p&gt;&lt;p&gt; Firebase limits the creation of over 100 users/per hour/per ip address (&lt;a href="https://firebase.google.com/docs/auth/limits"&gt;Authentication Limits&lt;/a&gt;). This isn't a problem if most of your accounts are authenticated with a identity provider like google or facebook. This isn't a problem if you can expect your users to each have their own ip address. Actually, this isn't a problem in general unless you are interested in demonstrating users logging in and out as anonymous users. :) &lt;/p&gt;&lt;p&gt; Because of these reasons, I have chosen to make this portion from examples rather than working code. This alleviates the need to write more complex code on the server side to deal with abusive/misconfigured/overeager clients that exceed the above limit. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Most apps require some way of authenticating a user. Firestore includes a fairly robust &lt;a href="https://firebase.google.com/docs/auth"&gt;Authentication System&lt;/a&gt;. Use of the built in authentication system will allow you to complete your project more quickly and securely than rolling your own solutions.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(def user-chan (get-user))

(go
  ;; The initial user-chan value is :firemore/logged-out as you are not logged in.
  (assert (= :firemore/logged-out (&amp;lt;! user-chan)))

  ;; Let's log you in as the anonymous user
  (login-as-anonymous!)

  ;; having done that, let's check what a user looks like
  (println "(1) your current user is -&amp;gt; " (&amp;lt;! user-chan))

  ;; Let's demonstrate logging in and out a few times. Note that your `:uid`
  ;; changes every time you login again with a new anonymous user.
  (login-as-anonymous!)
  (println "(2) your current user is -&amp;gt;" (&amp;lt;! user-chan))

  (login-as-anonymous!)
  (println "(3) your current user is -&amp;gt; " (&amp;lt;! user-chan))

  ;; Of course, you can also logout, let's demonstrate this.
  (logout!)
  (println "(4) your current user is -&amp;gt; " (= :firemore/logged-out (&amp;lt;! user-chan))))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above code logs you in as various anonymous users. Anonymous does NOT mean unidentified (you have a unique user id in &lt;code&gt;:uid&lt;/code&gt;). Anonymous does however mean that we don't know your &lt;code&gt;:email&lt;/code&gt;, &lt;code&gt;:name&lt;/code&gt;, or &lt;code&gt;:photo&lt;/code&gt;. Anonymous means that if you were to logout from this account or loose access to this system, there would be no way for you to log back in as this anonymous user (though you could always login as a new anonymous user).&lt;/p&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;Usage:
(get-user)

Returns a channel. puts! :firemore/logged-out when client is 
not logged into Firestore. Atom will contain a user map when client is logged in 
to Firestore. User map has the following form:

{:uid &amp;lt;application_unique_id&amp;gt;
 :email &amp;lt;user_email_address&amp;gt;
 :name &amp;lt;user_identifier&amp;gt;
 :photo &amp;lt;url_to_a_photo_for_this_user&amp;gt;}

Note: :uid will always be present. :email, :name, :photo may be present depending
on sign-in provider and/or whether you have set their values.

&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;Usage:
(logout!)

Log out the currently logged in user (if any).
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;Usage:
(login-as-anonymous!)

Log out any existing user, then log in a new anonymous user.
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(def user-chan (get-user))

(go
  (assert (= :firemore/logged-out (&amp;lt;! user-chan)))

  (login-as-anonymous!)
  (println "Check that we have a user -&amp;gt;" (&amp;lt;! user-chan))

  (delete-user!)
  (println "logged out and user is deleted -&amp;gt;" (= :firemore/logged-out
                                                  (&amp;lt;! user-chan))))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Most applications will also need to allow users to delete their accounts. This is trivial in firemore. Note that this only deletes the user entry from the Firestore Authentication, it does not delete any associated data within the Firestore Database. For more on cleaning up after user deletion, see &lt;a href="https://firebase.google.com/docs/auth/extend-with-functions#trigger_a_function_on_user_deletion"&gt;Trigger a function on user deletion&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;Usage:
(delete-user!)

Deletes the currently logged in user from Firestore. This removes all sign-in
providers for this user, as well as deleting the data in the user information
map returned by (get-user-atom). Note that this does NOT delete information
relating to the user from the actual Firestore database.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="clojure_interop"&gt;Clojure Interop&lt;/h2&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;Usage:
(fire-&amp;gt;clj js-object)
(fire-&amp;gt;clj js-object opts)

Returns the clojure form of the js-object document from Firestore. opts
allows you to modify the conversion.
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="no-highlight"&gt;(clj-&amp;gt;fire document)
(clj-&amp;gt;fire document options)

Returns a javascript object that can be passed to Firestore for writes. opts
allows you to modify the conversion.
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id="api"&gt;API&lt;/h1&gt;&lt;h1 id="contributing"&gt;Contributing&lt;/h1&gt;&lt;p&gt;Pull Request are always welcome and appreciated. If you want to discuss firemore, I am available most readily:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;On &lt;a href="https://clojurians.slack.com/messages/C073DKH9P/"&gt;clojurians.slack.com under #firemore&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Through the &lt;a href="https://github.com/samedhi/firemore/issues"&gt;issue tracking system&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;By email at stephen@read-line.com .&lt;/li&gt;&lt;/ol&gt;&lt;h1 id="credits"&gt;Credits&lt;/h1&gt;&lt;p&gt;&lt;a href="https://samedhi.github.io/"&gt;Stephen Cagle&lt;/a&gt; is a Senior Software Engineer at &lt;a href="https://www.dividendfinance.com/"&gt;Dividend Finance&lt;/a&gt; in San Francisco, CA. He is the original (currently only, but always accepting PRs!) creator/maintainer of firemore. &lt;a href="https://github.com/samedhi"&gt;@github&lt;/a&gt; &lt;a href="https://www.linkedin.com/in/stephen-cagle-92b895102/"&gt;@linkedin&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="/firemore-docs/img/stephen_and_nugget.jpg" alt="Man (Stephen Cagle) holding beer &amp;amp; small dog (Chihuahua)" /&gt;&lt;/p&gt;&lt;h1 id="license"&gt;License&lt;/h1&gt;&lt;p&gt;MIT License&lt;/p&gt;&lt;p&gt;Copyright (c) 2019 Stephen Cagle&lt;/p&gt;</description><pubDate>Wed, 26 Jun 2019 00:00:00 -0700</pubDate></item><item><guid>https://samedhi.github.io/firemore-docs/posts-output/2016-01-07-docs/</guid><link>https://samedhi.github.io/firemore-docs/posts-output/2016-01-07-docs/</link><title>Quick Start Guide</title><description>&lt;p&gt;This intro only documents a subset of Cryogen's features. For additional documentation please see the &lt;a href='http://cryogenweb.org'&gt;cryogen site&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="features"&gt;Features&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Blog posts and pages with Markdown (default) or AsciiDoc&lt;/li&gt;&lt;li&gt;Tags&lt;/li&gt;&lt;li&gt;Table of contents generation&lt;/li&gt;&lt;li&gt;Plain HTML page templates&lt;/li&gt;&lt;li&gt;Code syntax highlighting&lt;/li&gt;&lt;li&gt;Disqus support&lt;/li&gt;&lt;li&gt;Sitemap generation&lt;/li&gt;&lt;li&gt;RSS feed generation&lt;/li&gt;&lt;li&gt;Sass/SCSS compilation&lt;/li&gt;&lt;li&gt;Klipse Integration&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;You will need &lt;a href='https://github.com/technomancy/leiningen'&gt;Leiningen&lt;/a&gt; 2.5.0 or above installed.&lt;/p&gt;&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;&lt;h3 id="creating&amp;#95;a&amp;#95;new&amp;#95;site"&gt;Creating a New Site&lt;/h3&gt;&lt;p&gt;A new site can be created using the Cryogen template as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new cryogen my-blog
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="running&amp;#95;the&amp;#95;server"&gt;Running the Server&lt;/h3&gt;&lt;p&gt;The web server can be started from the &lt;code&gt;my-blog&lt;/code&gt; directory using the &lt;code&gt;lein-ring&lt;/code&gt; plugin:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The server will watch for changes in the &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;themes&lt;/code&gt; folders and recompile the content automatically.&lt;/p&gt;&lt;p&gt;You can also generate the content without bringing up a server via:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein run
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="site&amp;#95;configuration"&gt;Site Configuration&lt;/h3&gt;&lt;p&gt;The site configuration file is found at &lt;code&gt;content/config.edn&lt;/code&gt;, this file looks as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:site-title           &amp;quot;My Awesome Blog&amp;quot;
 :author               &amp;quot;Bob Bobbert&amp;quot;
 :description          &amp;quot;This blog is awesome&amp;quot;
 :site-url             &amp;quot;http://blogawesome.com/&amp;quot;
 :post-root            &amp;quot;posts&amp;quot;
 :page-root            &amp;quot;pages&amp;quot;
 :post-root-uri        &amp;quot;posts-output&amp;quot;
 :page-root-uri        &amp;quot;pages-output&amp;quot;
 :tag-root-uri         &amp;quot;tags-output&amp;quot;
 :author-root-uri      &amp;quot;authors-output&amp;quot;
 :public-dest          &amp;quot;public&amp;quot;
 :blog-prefix          &amp;quot;/blog&amp;quot;
 :rss-name             &amp;quot;feed.xml&amp;quot;
 :rss-filters          &amp;#91;&amp;quot;cryogen&amp;quot;&amp;#93;
 :recent-posts         3
 :post-date-format     &amp;quot;yyyy-MM-dd&amp;quot;
 :archive-group-format &amp;quot;yyyy MMMM&amp;quot;
 :sass-src             &amp;#91;&amp;#93;
 :sass-path            &amp;quot;sass&amp;quot;
 :compass-path         &amp;quot;compass&amp;quot;
 :theme                &amp;quot;blue&amp;quot;
 :resources            &amp;#91;&amp;quot;img&amp;quot;&amp;#93;
 :keep-files           &amp;#91;&amp;quot;.git&amp;quot;&amp;#93;
 :disqus?              false
 :disqus-shortname     &amp;quot;&amp;quot;
 :ignored-files        &amp;#91;#&amp;quot;\.#.&amp;#42;&amp;quot; #&amp;quot;.&amp;#42;\.swp$&amp;quot;&amp;#93;
 :previews?            false
 :posts-per-page       5
 :blocks-per-preview   2
 :clean-urls           :trailing-slash
 :collapse-subdirs?    false
 :hide-future-posts?   true
 :klipse               {}
 :debug?               false}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For information about each key please see the &lt;a href='http://cryogenweb.org/docs/configuration.html'&gt;"Configuration"&lt;/a&gt; portion of the Cryogen documentation site.&lt;/p&gt;&lt;h3 id="switching&amp;#95;between&amp;#95;markdown&amp;#95;and&amp;#95;asciidoc"&gt;Switching between Markdown and AsciiDoc&lt;/h3&gt;&lt;p&gt;Cryogen comes with Markdown support as default. If you want to use AsciiDoc instead, open the &lt;code&gt;project.clj&lt;/code&gt; in your created blog (e.g. &lt;code&gt;my-blog&lt;/code&gt;), and change the line in &lt;code&gt;:dependencies&lt;/code&gt; that says &lt;code&gt;cryogen-markdown&lt;/code&gt; to &lt;code&gt;cryogen-asciidoc&lt;/code&gt;. Instead of looking for files ending in &lt;code&gt;.md&lt;/code&gt; in the &lt;code&gt;content/md&lt;/code&gt; directory, the compiler will now look for files ending in &lt;code&gt;.asc&lt;/code&gt; in the &lt;code&gt;content/asc&lt;/code&gt; directory.&lt;/p&gt;&lt;h3 id="selecting&amp;#95;a&amp;#95;theme"&gt;Selecting a Theme&lt;/h3&gt;&lt;p&gt;The Cryogen template comes with three themes in the &lt;code&gt;themes&lt;/code&gt; folder. To change your blog's theme, change the value of the &lt;code&gt;:theme&lt;/code&gt; key in &lt;code&gt;config.edn&lt;/code&gt;. Note that the Nucleus theme is obtained from &lt;a href='http://www.downloadwebsitetemplates.co.uk/template/nucleus/'&gt;downloadwebsitetemplates.co.uk&lt;/a&gt; that requires you to keep the footer, unless you make a donation on their website.&lt;/p&gt;&lt;h3 id="customizing&amp;#95;layouts"&gt;Customizing Layouts&lt;/h3&gt;&lt;p&gt;Cryogen uses &lt;a href='https://github.com/yogthos/Selmer'&gt;Selmer&lt;/a&gt; templating engine for layouts. Please refer to its documentation to see the supported tags and filters for the layouts.&lt;/p&gt;&lt;p&gt;The layouts are contained in the &lt;code&gt;themes/{theme}/html&lt;/code&gt; folder of the project. By default, the &lt;code&gt;base.html&lt;/code&gt; layout is used to provide the general layout for the site. This is where you would add static resources such as CSS and JavaScript assets as well as define headers and footers for your site.&lt;/p&gt;&lt;p&gt;Each page layout should have a name that matches the &lt;code&gt;:layout&lt;/code&gt; key in the page metadata and end with &lt;code&gt;.html&lt;/code&gt;. Page layouts extend the base layout and should only contain the content relaveant to the page inside the &lt;code&gt;content&lt;/code&gt; block. For example, the &lt;code&gt;tag&lt;/code&gt; layout is located in &lt;code&gt;tag.html&lt;/code&gt; and looks as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class="xml"&gt;{% extends &amp;quot;/html/base.html&amp;quot; %}
{% block content %}
&amp;lt;div id=&amp;quot;posts-by-tag&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;Posts tagged {{name}}&amp;lt;/h2&amp;gt;
    &amp;lt;ul&amp;gt;
    {% for post in posts %}
        &amp;lt;li&amp;gt;
            &amp;lt;a href=&amp;quot;{{post.uri}}&amp;quot;&amp;gt;{{post.title}}&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
    {% endfor %}
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="code&amp;#95;syntax&amp;#95;highlighting"&gt;Code Syntax Highlighting&lt;/h3&gt;&lt;p&gt;Cryogen uses &lt;a href='https://highlightjs.org/'&gt;Highlight.js&lt;/a&gt; for code syntax highlighting. You can add more languages by replacing &lt;code&gt;themes/{theme}/js/highlight.pack.js&lt;/code&gt; with a customized package from &lt;a href='https://highlightjs.org/download/'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt; initHighlightingOnLoad&lt;/code&gt; function is called in &lt;code&gt;themes/{theme}/html/base.html&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad&amp;#40;&amp;#41;;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="deploying&amp;#95;your&amp;#95;site"&gt;Deploying Your Site&lt;/h2&gt;&lt;p&gt;The generated static content will be found under the &lt;code&gt;public&lt;/code&gt; folder. Simply copy the content to a static folder for a server such as Nginx or Apache and your site is now ready for service.&lt;/p&gt;&lt;p&gt;A sample Nginx configuration that's placed in &lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt; can be seen below:&lt;/p&gt;&lt;pre&gt;&lt;code class="javascript"&gt;server {
  listen 80 default&amp;#95;server;
  listen &amp;#91;::&amp;#93;:80 default&amp;#95;server ipv6only=on;
  server&amp;#95;name localhost &amp;lt;yoursite.com&amp;gt; &amp;lt;www.yoursite.com&amp;gt;;

  access&amp;#95;log  /var/log/blog&amp;#95;access.log;
  error&amp;#95;log   /var/log/blog&amp;#95;error.log;

  location / {
    alias       /var/blog/;
    error&amp;#95;page  404 = /404.html;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simply set &lt;code&gt;yoursite.com&lt;/code&gt; to the domain of your site in the above configuration and ensure the static content is available at &lt;code&gt;/var/blog/&lt;/code&gt;. Finally, place your custom error page in the &lt;code&gt;/var/blog/404.html&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;More information on deployment can be found &lt;a href='http://cryogenweb.org/docs/deploying-to-github-pages.html'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="third&amp;#95;party&amp;#95;libraries"&gt;Third Party Libraries&lt;/h2&gt;&lt;h4 id="https://github.com/greywolve/cryogen-markdown-external"&gt;https://github.com/greywolve/cryogen-markdown-external&lt;/h4&gt;&lt;p&gt;A Clojure library to provide Markdown rendering to the cryogen-core compiler by using an external command/program, such as pandoc.&lt;/p&gt;&lt;h2 id="some&amp;#95;sites&amp;#95;made&amp;#95;with&amp;#95;cryogen"&gt;Some Sites Made With Cryogen&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://carmen.la/blog/archives'&gt;My personal blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://cryogenweb.org'&gt;Cryogen Documentation Site&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://yogthos.net/'&gt;Yogthos' blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://www.chadstovern.com'&gt;Chad Stovern's blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://www.szcz.org/'&gt;szcz&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://blog.isvit.info'&gt;ISvit blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://lambdafunk.com'&gt;Lambda Funk&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://ddft.wiki'&gt;DDFT.wiki&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><pubDate>Thu, 07 Jan 2016 00:00:00 -0800</pubDate></item><item><guid>https://samedhi.github.io/firemore-docs/posts-output/2014-11-04-second-post/</guid><link>https://samedhi.github.io/firemore-docs/posts-output/2014-11-04-second-post/</link><title>Yet Another Post</title><description>&lt;h3 id="this&amp;#95;post&amp;#95;so&amp;#95;fetch"&gt;This Post So Fetch&lt;/h3&gt;&lt;p&gt;some more stuff happened&lt;/p&gt;</description><pubDate>Tue, 04 Nov 2014 00:00:00 -0800</pubDate></item><item><guid>https://samedhi.github.io/firemore-docs/posts-output/2014-03-10-first-post/</guid><link>https://samedhi.github.io/firemore-docs/posts-output/2014-03-10-first-post/</link><title>A Post</title><description>&lt;h3 id="this&amp;#95;post&amp;#95;not&amp;#95;fetch&amp;#95;enough"&gt;This Post Not Fetch Enough&lt;/h3&gt;&lt;p&gt;some stuff happened&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Stop trying to make fetch happen. &lt;/p&gt;&lt;footer&gt; Regina&lt;/footer&gt;&lt;/blockquote&gt;</description><pubDate>Mon, 10 Mar 2014 00:00:00 -0700</pubDate></item></channel></rss>